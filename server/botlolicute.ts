import mineflayer, { Bot } from 'mineflayer'
import { pathfinder, Movements } from 'mineflayer-pathfinder'
import * as net from 'net'

// Import goals using createRequire for CommonJS module
import { createRequire } from 'module'
const require = createRequire(import.meta.url)
const { goals } = require('mineflayer-pathfinder')
// import autoEat from 'mineflayer-auto-eat'
import { plugin as pvp } from 'mineflayer-pvp'
import { plugin as collectBlock } from 'mineflayer-collectblock'
import { Vec3 } from 'vec3'

const apiKey = "AIzaSyB8gZxjT6hFiOCeNS7ZNzVG-M_bDZ_CVNk" // Gemini AI key

// Bot configuration
const BOT_CONFIG = {
  host: process.env.MINECRAFT_SERVER_HOST || 'thuatzai123.aternos.me',
  port: parseInt(process.env.MINECRAFT_SERVER_PORT || '38893'),
  username: process.env.MINECRAFT_BOT_USERNAME || 'botlolicute',
  version: process.env.MINECRAFT_VERSION || '1.19.4',
  auth: 'offline' as const
}

// Bi·∫øn tr·∫°ng th√°i global
let bot: Bot
let targetPlayer: any = null
let followInterval: NodeJS.Timeout | null = null
let protectInterval: NodeJS.Timeout | null = null
let autoMineActive = false
let autoFarmActive = false
let autoFishingActive = false
let isFollowing = false
let isProtecting = false
let autoChestHuntActive = false
let fishingActive = false
let lootedChests: Set<string> = new Set() // Ghi nh·ªõ r∆∞∆°ng ƒë√£ loot
let reconnectAttempts = 0
const MAX_RECONNECT_ATTEMPTS = 5

async function testServerConnection() {
  return new Promise((resolve) => {
    const socket = new net.Socket()
    
    socket.setTimeout(5000) // 5 second timeout
    
    socket.on('connect', () => {
      socket.destroy()
      resolve(true)
    })
    
    socket.on('timeout', () => {
      socket.destroy()
      resolve(false)
    })
    
    socket.on('error', () => {
      resolve(false)
    })
    
    socket.connect(BOT_CONFIG.port, BOT_CONFIG.host)
  })
}

async function createBot() {
  console.log(`üöÄ ƒêang t·∫°o bot m·ªõi... (Th·ª≠ l·∫ßn ${reconnectAttempts + 1}/${MAX_RECONNECT_ATTEMPTS})`)
  console.log(`üì° K·∫øt n·ªëi t·ªõi: ${BOT_CONFIG.host}:${BOT_CONFIG.port}`)
  
  if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
    console.log('‚ùå ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi t·ªëi ƒëa. D·ª´ng bot.')
    console.log('üí° G·ª£i √Ω: Ki·ªÉm tra xem server Minecraft c√≥ ƒëang online kh√¥ng:')
    console.log(`   - Truy c·∫≠p https://${BOT_CONFIG.host} ƒë·ªÉ ki·ªÉm tra status`)
    console.log('   - Ho·∫∑c thay ƒë·ªïi MINECRAFT_SERVER_HOST trong file .env')
    return
  }
  
  // Test server connectivity first
  console.log('üîç Ki·ªÉm tra k·∫øt n·ªëi server...')
  const serverOnline = await testServerConnection()
  
  if (!serverOnline) {
    console.log('‚ùå Server kh√¥ng ph·∫£n h·ªìi. Server c√≥ th·ªÉ ƒëang offline.')
    console.log('üí° G·ª£i √Ω:')
    console.log('   1. Ki·ªÉm tra server Aternos c√≥ ƒëang ch·∫°y kh√¥ng')
    console.log('   2. Th·ª≠ k·∫øt n·ªëi b·∫±ng Minecraft client tr∆∞·ªõc')
    console.log('   3. Ki·ªÉm tra ƒë·ªãa ch·ªâ server v√† port c√≥ ƒë√∫ng kh√¥ng')
    console.log('‚è≥ S·∫Ω th·ª≠ l·∫°i sau...')
    
    // Still attempt connection but with warning
  } else {
    console.log('‚úÖ Server ph·∫£n h·ªìi, ƒëang k·∫øt n·ªëi bot...')
  }
  
  bot = mineflayer.createBot({
    host: BOT_CONFIG.host,
    port: BOT_CONFIG.port,
    username: BOT_CONFIG.username,
    version: BOT_CONFIG.version,
    auth: BOT_CONFIG.auth,
    keepAlive: true,
    hideErrors: false
  })

  // Load plugins with error handling
  try {
    bot.loadPlugin(pathfinder)
    // bot.loadPlugin(autoEat) // Disabled due to import issues
    bot.loadPlugin(pvp)
    bot.loadPlugin(collectBlock)
    console.log('‚úÖ Plugins loaded successfully')
  } catch (pluginError) {
    console.log('‚ö†Ô∏è Warning loading plugins:', pluginError)
  }

  // Connection events
  bot.on('login', () => {
    console.log('üîë Bot ƒëang ƒëƒÉng nh·∫≠p...')
  })

  bot.on('spawn', () => {
    console.log('üéâ Bot ƒë√£ spawn th√†nh c√¥ng!')
    reconnectAttempts = 0 // Reset on successful connection
    
    const defaultMove = new Movements(bot)
    bot.pathfinder.setMovements(defaultMove)

    // Auto-eat disabled due to plugin issues

    // Start c√°c ch·ª©c nƒÉng
    startFlirting()
    autoEatSetup()
    collectNearbyItems()
  })

  bot.on('health', () => {
    // Handle health updates silently
  })

  // Note: The physicTick deprecation warning might be coming from plugins
  // We use the correct event name here, but plugins may still use the old one

  // ------------------ Trang b·ªã ------------------
  function equipBestWeapon() {
    try {
      const weapons = bot.inventory.items().filter(item => 
        item.name.includes('sword') || 
        item.name.includes('axe') || 
        item.name.includes('pickaxe') ||
        item.name.includes('shovel')
      )
      
      if (weapons.length > 0) {
        // Sort by attack damage if available, otherwise by item tier
        const bestWeapon = weapons.sort((a, b) => {
          const getTier = (name: string) => {
            if (name.includes('diamond')) return 4
            if (name.includes('iron')) return 3
            if (name.includes('stone')) return 2
            if (name.includes('wood')) return 1
            return 0
          }
          return getTier(b.name) - getTier(a.name)
        })[0]
        
        bot.equip(bestWeapon, 'hand').catch(() => {})
      }
    } catch (error) {
      console.log('L·ªói trang b·ªã v≈© kh√≠:', error)
    }
  }

  function equipBestArmor() {
    try {
      const armorSlots: {[key: string]: any} = {
        head: null,
        torso: null,
        legs: null,
        feet: null
      }

      for (const item of bot.inventory.items()) {
        if (item.name.includes('helmet') && (!armorSlots.head || item.maxDurability > armorSlots.head.maxDurability)) {
          armorSlots.head = item
        } else if (item.name.includes('chestplate') && (!armorSlots.torso || item.maxDurability > armorSlots.torso.maxDurability)) {
          armorSlots.torso = item
        } else if (item.name.includes('leggings') && (!armorSlots.legs || item.maxDurability > armorSlots.legs.maxDurability)) {
          armorSlots.legs = item
        } else if (item.name.includes('boots') && (!armorSlots.feet || item.maxDurability > armorSlots.feet.maxDurability)) {
          armorSlots.feet = item
        }
      }

      // Equip armor
      Object.entries(armorSlots).forEach(([slot, item]) => {
        if (item) {
          const destination = slot === 'torso' ? 'torso' : slot
          bot.equip(item, destination as any).catch(() => {})
        }
      })
    } catch (error) {
      console.log('L·ªói trang b·ªã gi√°p:', error)
    }
  }

  function equipBestTool() {
    try {
      const tools = ['pickaxe', 'axe', 'shovel', 'hoe']
      let bestTool = null
      let highestTier = 0
      
      for (const item of bot.inventory.items()) {
        for (const toolType of tools) {
          if (item.name.includes(toolType)) {
            let tier = 0
            if (item.name.includes('diamond')) tier = 4
            else if (item.name.includes('iron')) tier = 3  
            else if (item.name.includes('stone')) tier = 2
            else if (item.name.includes('wooden')) tier = 1
            
            if (tier > highestTier) {
              highestTier = tier
              bestTool = item
            }
          }
        }
      }
      
      if (bestTool) {
        bot.equip(bestTool, 'hand').catch(() => {})
        console.log(`‚öíÔ∏è Bot ƒë√£ trang b·ªã ${bestTool.name}`)
      }
    } catch (error) {
      console.log('L·ªói trang b·ªã tool:', error)
    }
  }

  function equipOffhand() {
    try {
      const totem = bot.inventory.items().find(item => item.name === 'totem_of_undying')
      const shield = bot.inventory.items().find(item => item.name.includes('shield'))

      if (totem) {
        bot.equip(totem, 'off-hand').catch(() => {})
        console.log(`‚ú® Bot ƒë√£ trang b·ªã V·∫≠t T·ªï v√†o tay tr√°i.`)
      } else if (shield) {
        bot.equip(shield, 'off-hand').catch(() => {})
        console.log(`üõ°Ô∏è Bot ƒë√£ trang b·ªã Khi√™n v√†o tay tr√°i.`)
      }
    } catch (error) {
      console.log('L·ªói trang b·ªã offhand:', error)
    }
  }

  // T·ª± ƒë·ªông trang b·ªã ƒë·ªãnh k·ª≥
  setInterval(() => {
    equipBestWeapon()
    equipBestArmor()
    equipOffhand()
  }, 10000)

  // ------------------ Auto eat ------------------
  function autoEatSetup() {
    console.log('üçΩÔ∏è Auto eat feature temporarily disabled')
  }

  // ------------------ Nh·∫∑t item ------------------
  function collectNearbyItems() {
    setInterval(() => {
      try {
        const entities = Object.values(bot.entities)
        for (const entity of entities) {
          if (entity.name === 'item' && entity.position && bot.entity.position.distanceTo(entity.position) < 5) {
            bot.lookAt(entity.position, true).catch(() => {})
            bot.collectBlock.collect(entity).catch(() => {})
          }
        }
      } catch (error) {
        // Ignore errors
      }
    }, 2000)
  }

  // ------------------ Random Cute Chat / Flirting ------------------
  function startFlirting() {
    setInterval(async () => {
      if (Math.random() < 0.4) { // 40% chance m·ªói 20s
        if (apiKey) {
          // D√πng AI ƒë·ªÉ t·∫°o c√¢u th·∫£ th√≠nh
          const prompts = [
            "T·∫°o c√¢u th·∫£ th√≠nh cute cho bot Minecraft t√™n Loli. Ng·∫Øn d∆∞·ªõi 60 k√Ω t·ª±. X∆∞ng t·ªõ, g·ªçi c·∫≠u.",
            "Bot Loli n√≥i c√¢u ng·ªçt ng√†o v·ªõi ng∆∞·ªùi ch∆°i. D∆∞·ªõi 60 k√Ω t·ª±, c√≥ emoji, x∆∞ng t·ªõ g·ªçi c·∫≠u.",
            "Loli bot mu·ªën th·∫£ th√≠nh cute. T·∫°o c√¢u ng·∫Øn d∆∞·ªõi 60 k√Ω t·ª±, ƒë√°ng y√™u, x∆∞ng t·ªõ g·ªçi c·∫≠u."
          ]
          
          try {
            const randomPrompt = prompts[Math.floor(Math.random() * prompts.length)]
            const payload = {
              contents: [{ parts: [{ text: randomPrompt }] }]
            }

            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            })

            const result = await response.json()
            const text = result?.candidates?.[0]?.content?.parts?.[0]?.text

            if (text) {
              bot.chat(text.substring(0, 70))
            } else {
              throw new Error('No AI response')
            }
          } catch (error) {
            // Fallback messages n·∫øu AI kh√¥ng ho·∫°t ƒë·ªông
            const fallbackMessages = [
              "C·∫≠u c√≥ nh·ªõ t·ªõ kh√¥ng? üíï",
              "T·ªõ ƒëang nghƒ© v·ªÅ c·∫≠u ƒë√≥! üòä",
              "C·∫≠u ƒë·∫πp trai qu√°! üòò", 
              "T·ªõ th√≠ch ch∆°i v·ªõi c·∫≠u! üíñ",
              "C·∫≠u c√≥ th∆∞∆°ng t·ªõ kh√¥ng? ü•∫",
              "T·ªõ mu·ªën ·ªü b√™n c·∫≠u m√£i! üíï",
              "C·∫≠u l√†m t·ªõ tim ƒë·∫≠p nhanh! üíì"
            ]
            const randomMessage = fallbackMessages[Math.floor(Math.random() * fallbackMessages.length)]
            bot.chat(randomMessage)
          }
        } else {
          // Kh√¥ng c√≥ API key th√¨ d√πng messages c√≥ s·∫µn
          const simpleMessages = [
            "C·∫≠u c√≥ nh·ªõ t·ªõ kh√¥ng? üíï",
            "T·ªõ th√≠ch ch∆°i v·ªõi c·∫≠u! üíñ",
            "C·∫≠u ƒë·∫πp trai qu√°! üòò",
            "T·ªõ s·∫Ω b·∫£o v·ªá c·∫≠u! üõ°Ô∏è"
          ]
          const randomMessage = simpleMessages[Math.floor(Math.random() * simpleMessages.length)]
          bot.chat(randomMessage)
        }
      }
    }, 20000) // 20 gi√¢y m·ªôt l·∫ßn
  }

  // ------------------ Chat Commands ------------------
  bot.on('chat', async (username: string, message: string) => {
    console.log(`üí¨ Chat nh·∫≠n ƒë∆∞·ª£c: [${username}]: ${message}`)
    
    if (username === bot.username || username === 'server' || username === 'console') {
      return
    }

    const cleanMessage = message.toLowerCase().trim()
    console.log(`üîç X·ª≠ l√Ω l·ªánh: "${cleanMessage}"`)

    // X·ª≠ l√Ω c√°c l·ªánh chat
    if (cleanMessage.includes('theo')) {
      startFollowingPlayer(username)
    } else if (cleanMessage.includes('b·∫£o v·ªá')) {
      startProtectingPlayer(username)
    } else if (cleanMessage.includes('d·ª´ng') || cleanMessage.includes('stop')) {
      stopAll()
    } else if (cleanMessage.includes('ng·ªß')) {
      goSleep()
    } else if (cleanMessage.startsWith('c·∫ßn')) {
      giveItemToPlayer(username, cleanMessage)
    } else if (cleanMessage.startsWith('auto mine') || cleanMessage.includes('ƒë√†o')) {
      if (cleanMessage.includes('diamond')) {
        startAutoMine('diamond_ore')
      } else if (cleanMessage.includes('iron')) {
        startAutoMine('iron_ore') 
      } else if (cleanMessage.includes('coal')) {
        startAutoMine('coal_ore')
      } else if (cleanMessage.includes('gold')) {
        startAutoMine('gold_ore')
      } else {
        startAutoMine('diamond_ore') // default
      }
    } else if (cleanMessage.includes('r∆∞∆°ng') || cleanMessage.includes('chest')) {
      smartChestHunt()
    } else if (cleanMessage.includes('c·∫•t ƒë·ªì')) {
      storeItemsInChest()
    } else if (cleanMessage.includes('d·ª´ng c√¢u c√°')) {
      stopFishing()
    } else if (cleanMessage.includes('auto farm all') || cleanMessage.includes('farm')) {
      startAutoFarmAll()
    } else if (cleanMessage.includes('c√¢u') || cleanMessage.includes('fish')) {
      startFishing()
    } else if (cleanMessage.includes('botlolicute') || cleanMessage.startsWith('bot ∆°i')) {
      handleChatWithAI(username, cleanMessage)
    } else {
      // Random AI chat response
      if (Math.random() < 0.6) { // 60% chance ƒë·ªÉ ph·∫£n h·ªìi
        handleChatWithAI(username, cleanMessage)
      }
    }
  })

  // ------------------ Chat AI Response ------------------
  async function handleChatWithAI(username: string, message: string) {
    if (!apiKey) {
      bot.chat('ü•∫ T·ªõ ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh AI, c·∫≠u li√™n h·ªá admin nh√©!')
      return
    }

    try {
      const prompt = message.replace('botlolicute', '').replace('bot ∆°i', '').trim()
      const cutePrompts = [
        `T·ªõ l√† Loli bot cute trong Minecraft. ${username} n√≥i: "${prompt}". Tr·∫£ l·ªùi ng·∫Øn d∆∞·ªõi 80 k√Ω t·ª±, ƒë√°ng y√™u, h∆°i th·∫£ th√≠nh. X∆∞ng t·ªõ, g·ªçi c·∫≠u.`,
        `T·ªõ l√† bot AI t√™n Loli, ƒëang ch∆°i v·ªõi ${username}. Ph·∫£n h·ªìi "${prompt}" theo ki·ªÉu cute girl, ng·∫Øn g·ªçn, c√≥ emoji. D√πng t·ªõ/c·∫≠u.`,
        `T·ªõ l√† Loli bot ƒë√°ng y√™u. ${username}: "${prompt}". Tr·∫£ l·ªùi ng·ªçt ng√†o, h∆°i flirt, d∆∞·ªõi 80 k√Ω t·ª±. X∆∞ng t·ªõ g·ªçi c·∫≠u.`
      ]
      
      const systemPrompt = cutePrompts[Math.floor(Math.random() * cutePrompts.length)]

      const payload = {
        contents: [{ parts: [{ text: systemPrompt }] }]
      }

      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })

      const result = await response.json()
      const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text

      if (generatedText) {
        bot.chat(generatedText.substring(0, 80))
      } else {
        const fallbackResponses = [
          `Hmm... t·ªõ ƒëang nghƒ© v·ªÅ c·∫≠u ƒë√≥! üíï`,
          `C·∫≠u n√≥i g√¨ v·∫≠y? T·ªõ h∆°i m∆° m√†ng n√®! üòä`,
          `√îi t·ªõ ƒëang b·∫≠n... nh∆∞ng lu√¥n c√≥ time cho c·∫≠u! üòò`
        ]
        const randomFallback = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)]
        bot.chat(randomFallback)
      }
    } catch (error) {
      const errorResponses = [
        `√îi, t·ªõ h∆°i r·ªëi... c·∫≠u n√≥i l·∫°i kh√¥ng? ü•∫`,
        `T·ªõ kh√¥ng nghe r√µ, c·∫≠u th∆∞∆°ng t·ªõ th√¨ n√≥i l·∫°i! üíï`,
        `Hmm? T·ªõ ƒëang m∆° v·ªÅ c·∫≠u n√®! üòä`
      ]
      const randomError = errorResponses[Math.floor(Math.random() * errorResponses.length)]
      bot.chat(randomError)
      console.error('L·ªói chat AI:', error)
    }
  }

  // ------------------ Follow / Protect ------------------
  function startFollowingPlayer(username: string) {
    const playerEntity = bot.players[username]?.entity
    if (!playerEntity) {
      bot.chat(`ü•∫ C·∫≠u ph·∫£i ·ªü trong t·∫ßm nh√¨n c·ªßa t·ªõ th√¨ t·ªõ m·ªõi ƒëi theo ƒë∆∞·ª£c!`)
      return
    }

    targetPlayer = playerEntity
    bot.chat(`‚ù§Ô∏è T·ªõ s·∫Ω theo c·∫≠u ƒë·∫øn c√πng tr·ªùi cu·ªëi ƒë·∫•t!`)
    stopProtecting()
    startFollowing()
    console.log(`‚úÖ B·∫Øt ƒë·∫ßu theo ${username}`)
  }

  function startFollowing() {
    isFollowing = true
    if (followInterval) clearInterval(followInterval)
    
    followInterval = setInterval(async () => {
      if (!targetPlayer || !targetPlayer.isValid) {
        stopFollowing()
        return
      }

      const targetPos = targetPlayer.position
      const distance = bot.entity.position.distanceTo(targetPos)

      // Ki·ªÉm tra boat logic ch·ªâ khi player g·∫ßn
      const botInBoat = bot.vehicle !== null
      
      if (distance <= 10) {
        // Ki·ªÉm tra xem player c√≥ ng·ªìi thuy·ªÅn kh√¥ng
        const playerInBoat = targetPlayer.vehicle !== null
        
        if (playerInBoat && !botInBoat) {
          // Player ng·ªìi thuy·ªÅn, bot ch∆∞a ng·ªìi -> t√¨m thuy·ªÅn ƒë·ªÉ ng·ªìi
          const availableBoat = Object.values(bot.entities).find((entity: any) => 
            entity.name === 'boat' && 
            entity.position && 
            entity.position.distanceTo(bot.entity.position) < 8 && 
            (!entity.passengers || entity.passengers.length === 0)
          )
          
          if (availableBoat) {
            try {
              bot.chat('üö§ T·ªõ c≈©ng ng·ªìi thuy·ªÅn theo c·∫≠u!')
              await bot.mount(availableBoat as any)
            } catch (error) {
              console.log('L·ªói ng·ªìi thuy·ªÅn:', error)
            }
          }
        } else if (!playerInBoat && botInBoat) {
          // Player kh√¥ng ng·ªìi thuy·ªÅn, bot ƒëang ng·ªìi -> xu·ªëng thuy·ªÅn
          try {
            bot.chat('üö∂‚Äç‚ôÄÔ∏è C·∫≠u xu·ªëng thuy·ªÅn r·ªìi, t·ªõ c≈©ng xu·ªëng!')
            bot.dismount()
          } catch (error) {
            console.log('L·ªói xu·ªëng thuy·ªÅn:', error)
          }
        }
      }

      // N·∫øu qu√° xa th√¨ teleport
      if (distance > 15) {
        try {
          bot.chat(`/tp ${targetPlayer.username}`)
        } catch (e) {
          // N·∫øu kh√¥ng th·ªÉ tp, th√¨ ƒë√†o ƒë∆∞·ªùng v√† b∆°i
          bot.pathfinder.setGoal(new goals.GoalBlock(targetPos.x, targetPos.y, targetPos.z))
          
          // Cho ph√©p ƒë·∫≠p m·ªçi kh·ªëi c·∫£n
          const movements = new Movements(bot)
          movements.canDig = true
          movements.allow1by1towers = true
          movements.allowParkour = false
          movements.allowSprinting = true
          movements.allowEntityDetection = true
          
          // Cho ph√©p l·∫∑n
          movements.allowFreeMotion = true
          movements.canOpenDoors = true
          
          bot.pathfinder.setMovements(movements)
        }
        return
      }

      // Gi·ªØ kho·∫£ng c√°ch 2 block  
      if (!botInBoat) {
        bot.pathfinder.setGoal(new goals.GoalFollow(targetPlayer, 2), true)
      }
    }, 200)
  }

  function stopFollowing() {
    isFollowing = false
    if (followInterval) {
      clearInterval(followInterval)
      followInterval = null
    }
    bot.pathfinder.setGoal(null)
  }

  function startProtectingPlayer(username: string) {
    const playerEntity = bot.players[username]?.entity
    if (!playerEntity) {
      bot.chat(`ü•∫ C·∫≠u ph·∫£i ·ªü g·∫ßn t·ªõ th√¨ t·ªõ m·ªõi b·∫£o v·ªá ƒë∆∞·ª£c!`)
      return
    }

    targetPlayer = playerEntity
    bot.chat(`üõ°Ô∏è T·ªõ s·∫Ω b·∫£o v·ªá c·∫≠u kh·ªèi t·∫•t c·∫£ nguy hi·ªÉm!`)
    stopFollowing()
    startProtecting()
    console.log(`‚úÖ B·∫Øt ƒë·∫ßu b·∫£o v·ªá ${username}`)
  }

  function startProtecting() {
    isProtecting = true
    if (protectInterval) clearInterval(protectInterval)
    
    protectInterval = setInterval(async () => {
      if (!targetPlayer || !targetPlayer.isValid) {
        stopProtecting()
        return
      }

      const targetPos = targetPlayer.position
      const distance = bot.entity.position.distanceTo(targetPos)

      // Ki·ªÉm tra m√°u v√† ƒÉn th·ª©c ƒÉn n·∫øu c·∫ßn
      const health = bot.health
      const food = bot.food
      
      if (health < 15 || food < 15) { // M√°u d∆∞·ªõi 15 ho·∫∑c ƒë√≥i
        const foodItems = bot.inventory.items().filter(item => 
          item.name.includes('bread') || 
          item.name.includes('apple') || 
          item.name.includes('meat') ||
          item.name.includes('fish') ||
          item.name.includes('potato') ||
          item.name.includes('carrot')
        )
        
        if (foodItems.length > 0) {
          try {
            await bot.equip(foodItems[0], 'hand')
            bot.consume()
            bot.chat('üçû T·ªõ ƒÉn th·ª©c ƒÉn ƒë·ªÉ h·ªìi m√°u r·ªìi ƒë√°nh ti·∫øp!')
            await new Promise(resolve => setTimeout(resolve, 1000))
          } catch (error) {
            console.log('L·ªói ƒÉn th·ª©c ƒÉn:', error)
          }
        }
      }

      // T√¨m mob g·∫ßn ƒë·ªÉ t·∫•n c√¥ng (ch·ªâ trong ph·∫°m vi 7 block)
      const mob = bot.nearestEntity((entity: any) => {
        if (!entity || !entity.position) return false
        
        const distance = bot.entity.position.distanceTo(entity.position)
        if (distance >= 7) return false
        
        // C√°c lo·∫°i mob c·∫ßn t·∫•n c√¥ng
        const hostileMobs = ['zombie', 'skeleton', 'creeper', 'spider', 'witch', 'pillager', 'vindicator', 'evoker', 'husk', 'stray', 'phantom', 'drowned']
        const mobName = entity.name ? entity.name.toLowerCase() : ''
        const displayName = entity.displayName ? entity.displayName.toLowerCase() : ''
        
        // Ki·ªÉm tra theo t√™n ho·∫∑c displayName
        const isHostile = hostileMobs.some(mobType => 
          mobName.includes(mobType) || displayName.includes(mobType)
        )
        
        // Ho·∫∑c ki·ªÉm tra theo type v√† lo·∫°i tr·ª´ c√°c mob th√¢n thi·ªán
        const isMobType = entity.type === 'mob' && 
                         !mobName.includes('villager') && 
                         !mobName.includes('iron_golem') && 
                         !displayName.includes('enderman')
        
        return isHostile || isMobType
      })

      // N·∫øu c√°ch xa player qu√° 9 block th√¨ ∆∞u ti√™n ƒëi theo player
      if (distance > 9) {
        bot.pvp.stop()
        bot.pathfinder.setGoal(new goals.GoalFollow(targetPlayer, 2), true)
      } else if (mob && distance <= 9 && health > 10) { // Ch·ªâ ƒë√°nh khi m√°u ƒë·ªß
        equipBestWeapon()
        bot.setControlState('sprint', true)
        bot.pvp.attack(mob)
        console.log(`‚öîÔ∏è ƒêang t·∫•n c√¥ng ${mob.name || mob.displayName} c√°ch ${Math.round(bot.entity.position.distanceTo(mob.position))} blocks`)
      } else {
        bot.pvp.stop()
        if (distance > 6) {
          bot.pathfinder.setGoal(new goals.GoalFollow(targetPlayer, 2), true)
        }
      }
    }, 200)
  }

  function stopProtecting() {
    isProtecting = false
    if (protectInterval) {
      clearInterval(protectInterval)
      protectInterval = null
    }
    bot.pvp.stop()
    bot.pathfinder.setGoal(null)
  }

  function stopAll() {
    stopFollowing()
    stopProtecting()
    targetPlayer = null
    autoMineActive = false
    autoFarmActive = false
    autoFishingActive = false
    autoChestHuntActive = false
    fishingActive = false
    
    bot.pathfinder.setGoal(null)
    bot.pvp.stop()
    
    bot.chat(`üõë ƒê∆∞·ª£c r·ªìi c·∫≠u, t·ªõ d·ª´ng t·∫•t c·∫£ ho·∫°t ƒë·ªông ƒë√¢y! üíï`)
    console.log('‚èπÔ∏è D·ª´ng t·∫•t c·∫£ ho·∫°t ƒë·ªông')
  }

  // ------------------ Sleep ------------------
  async function goSleep() {
    console.log('üò¥ Y√™u c·∫ßu bot ƒëi ng·ªß')
    
    if (bot.time.isDay) {
      bot.chat(`‚òÄÔ∏è Tr·ªùi ƒëang s√°ng m√† c·∫≠u, ch∆∞a ƒëi ng·ªß ƒë∆∞·ª£c ƒë√¢u!`)
      return
    }

    const bedBlock = bot.findBlock({
      matching: (block: any) => block.name.includes('bed'),
      maxDistance: 16
    })

    if (bedBlock) {
      bot.chat(`üò¥ T·ªõ bu·ªìn ng·ªß qu√°, ƒëi ng·ªß th√¥i n√†o!`)
      try {
        await bot.sleep(bedBlock)
        bot.chat(`Zzz... üò¥`)
      } catch (err) {
        bot.chat(`üò¢ T·ªõ kh√¥ng ng·ªß ƒë∆∞·ª£c ·ªü ƒë√¢y. C·∫≠u t√¨m ch·ªó kh√°c nh√©.`)
        console.log('L·ªói ng·ªß:', err)
      }
    } else {
      bot.chat(`üõå T·ªõ kh√¥ng t√¨m th·∫•y gi∆∞·ªùng n√†o g·∫ßn ƒë√¢y c·∫£.`)
    }
  }

  // ------------------ Give Item ------------------
  function giveItemToPlayer(username: string, msg: string) {
    const match = msg.match(/c·∫ßn (\d+) (\w+)/)
    if (!match) return

    const qty = parseInt(match[1])
    const name = match[2]
    const playerEntity = bot.players[username]?.entity
    
    if (!playerEntity) {
      bot.chat(`ü•∫ Kh√¥ng th·∫•y c·∫≠u ƒë·ªÉ ƒë∆∞a ${name}`)
      return
    }

    const item = bot.inventory.items().find(i => i.name.includes(name))
    if (!item) {
      bot.chat(`ü•∫ Kh√¥ng c√≥ ${name}`)
      return
    }

    const throwItem = async () => {
      try {
        const distance = bot.entity.position.distanceTo(playerEntity.position)
        if (distance > 3) {
          bot.pathfinder.setGoal(new goals.GoalFollow(playerEntity, 2))
        } else {
          await bot.toss(item.type, null, qty)
          bot.chat(`üéÅ ƒê√£ n√©m ${item.name} cho ${username}`)
        }
      } catch (error) {
        console.log('L·ªói n√©m item:', error)
      }
    }

    throwItem()
  }

  // ------------------ Auto Mine ------------------
  function startAutoMine(oreName: string) {
    if (!oreName) return
    
    autoMineActive = true
    bot.chat(`‚õèÔ∏è B·∫Øt ƒë·∫ßu ƒë√†o ${oreName}`)
    
    const mineInterval = setInterval(async () => {
      if (!autoMineActive) {
        clearInterval(mineInterval)
        return
      }

      try {
        // Ch·ªâ trang b·ªã tool n·∫øu ch∆∞a c√≥ ho·∫∑c kh√¥ng ph√π h·ª£p
        const currentItem = bot.heldItem
        if (!currentItem || !currentItem.name.includes('pickaxe')) {
          equipBestTool()
        }
        
        const ore = bot.findBlock({
          matching: (block: any) => block.name.includes(oreName),
          maxDistance: 64
        })

        if (ore) {
          console.log(`‚õèÔ∏è T√¨m th·∫•y ${oreName} t·∫°i ${ore.position}`)
          
          // Ki·ªÉm tra kho·∫£ng c√°ch ƒë·∫øn ore
          const distance = bot.entity.position.distanceTo(ore.position)
          
          if (distance > 4.5) {
            // Thi·∫øt l·∫≠p movements ƒë·ªÉ di chuy·ªÉn
            const movements = new Movements(bot)
            movements.canDig = true
            movements.allow1by1towers = true
            movements.allowParkour = true
            movements.allowSprinting = true
            bot.pathfinder.setMovements(movements)
            
            // Di chuy·ªÉn ƒë·∫øn ore
            bot.pathfinder.setGoal(new goals.GoalBlock(ore.position.x, ore.position.y, ore.position.z))
            
            // ƒê·ª£i di chuy·ªÉn xong
            await new Promise(resolve => setTimeout(resolve, 3000))
          }
          
          // D·ª´ng pathfinder tr∆∞·ªõc khi ƒë√†o
          bot.pathfinder.setGoal(null)
          
          // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o pathfinder ƒë√£ d·ª´ng
          await new Promise(resolve => setTimeout(resolve, 500))
          
          try {
            // Ki·ªÉm tra l·∫°i kho·∫£ng c√°ch tr∆∞·ªõc khi ƒë√†o
            const finalDistance = bot.entity.position.distanceTo(ore.position)
            if (finalDistance <= 4.5) {
              await bot.dig(ore)
              bot.chat(`‚úÖ ƒê√£ ƒë√†o xong ${oreName}`)
            } else {
              console.log(`‚ùå Qu√° xa ƒë·ªÉ ƒë√†o ${oreName} (kho·∫£ng c√°ch: ${finalDistance.toFixed(2)})`)
            }
          } catch (digError) {
            console.log('L·ªói ƒë√†o:', digError)
          }
        } else {
          console.log(`üîç Kh√¥ng t√¨m th·∫•y ${oreName} trong ph·∫°m vi 128 block`)
        }
      } catch (error) {
        console.log('L·ªói auto mine:', error)
      }
    }, 5000) // TƒÉng interval ƒë·ªÉ tr√°nh spam
  }

  // ------------------ Simple Chest Hunt ------------------
  async function smartChestHunt() {
    try {
      stopAll()
      autoChestHuntActive = false // T·∫°m th·ªùi disable
      bot.chat('üóÉÔ∏è T√≠nh nƒÉng t√¨m r∆∞∆°ng ƒëang ƒë∆∞·ª£c c·∫£i ti·∫øn, th·ª≠ l·∫°i sau nh√©! üíï')
      
    } catch (error) {
      bot.chat('ü•∫ C√≥ l·ªói khi t√¨m r∆∞∆°ng...')
      console.log('L·ªói chest hunt:', error)
      autoChestHuntActive = false
    }
  }
  
  // Simple chest finding (will be improved later)
  async function findSingleChest() {
    try {
      bot.chat('üîç T√¨m r∆∞∆°ng ƒë∆°n gi·∫£n...')
      // Basic implementation without recursion
      const chestBlock = bot.findBlocks({
        matching: ['chest', 'barrel', 'ender_chest'],
        maxDistance: 32,
        count: 1
      })

      if (chestBlock.length > 0) {
        bot.chat(`üì¶ T√¨m th·∫•y r∆∞∆°ng g·∫ßn nh·∫•t!`)
        // Simple navigation without complex logic
        const goal = new goals.GoalNear(chestBlock[0].x, chestBlock[0].y, chestBlock[0].z, 2)
        bot.pathfinder.setGoal(goal)
      } else {
        bot.chat('ü•∫ Kh√¥ng t√¨m th·∫•y r∆∞∆°ng g·∫ßn ƒë√¢y')
      }
    } catch (error) {
      bot.chat('üõë L·ªói t√¨m r∆∞∆°ng')
      console.log('L·ªói find chest:', error)
    }
  }
  
  function stopChestHunt() {
    autoChestHuntActive = false
    bot.chat('üõë T·ªõ d·ª´ng t√¨m r∆∞∆°ng r·ªìi!')
  }
  
  // ------------------ C·∫•t ƒë·ªì v√†o r∆∞∆°ng ------------------
  async function storeItemsInChest() {
    try {
      bot.chat('üì¶ T·ªõ s·∫Ω c·∫•t ƒë·ªì v√†o r∆∞∆°ng g·∫ßn nh·∫•t nh√©!')
      
      // T√¨m r∆∞∆°ng g·∫ßn nh·∫•t
      const chestBlock = bot.findBlock({
        matching: (block: any) => {
          return block.name.includes('chest') || 
                 block.name.includes('barrel') ||
                 block.name.includes('shulker')
        },
        maxDistance: 32
      })

      if (!chestBlock) {
        bot.chat('ü•∫ T·ªõ kh√¥ng t√¨m th·∫•y r∆∞∆°ng n√†o g·∫ßn ƒë·ªÉ c·∫•t ƒë·ªì...')
        return
      }

      // Di chuy·ªÉn ƒë·∫øn r∆∞∆°ng
      const goal = new goals.GoalNear(chestBlock.position.x, chestBlock.position.y, chestBlock.position.z, 1)
      bot.pathfinder.setGoal(goal)
      
      await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('Timeout'))
        }, 15000)
        
        const checkDistance = setInterval(async () => {
          const distance = bot.entity.position.distanceTo(chestBlock.position)
          
          if (distance <= 1.5) {
            clearInterval(checkDistance)
            clearTimeout(timeout)
            resolve(true)
          }
        }, 500)
      })

      // M·ªü r∆∞∆°ng v√† c·∫•t ƒë·ªì
      await bot.lookAt(chestBlock.position, true)
      const chest = await bot.openChest(chestBlock)
      
      let storedCount = 0
      const itemsToKeep = ['sword', 'pickaxe', 'axe', 'shovel', 'hoe', 'helmet', 'chestplate', 'leggings', 'boots', 'bread', 'apple', 'meat', 'fish', 'potato', 'carrot', 'golden_apple', 'shield', 'bow', 'crossbow', 'fishing_rod']
      
      for (const item of bot.inventory.items()) {
        // Ki·ªÉm tra xem c√≥ ph·∫£i ƒë·ªì c·∫ßn gi·ªØ kh√¥ng
        const shouldKeep = itemsToKeep.some(keepItem => 
          item.name.toLowerCase().includes(keepItem) || 
          item.displayName?.toLowerCase().includes(keepItem)
        )
        
        if (!shouldKeep) {
          try {
            await chest.deposit(item.type, null, item.count)
            storedCount++
            await new Promise(resolve => setTimeout(resolve, 100))
          } catch (error) {
            console.log('L·ªói c·∫•t ƒë·ªì:', error)
          }
        }
      }
      
      chest.close()
      bot.chat(`‚úÖ ƒê√£ c·∫•t ${storedCount} v·∫≠t ph·∫©m v√†o r∆∞∆°ng! Gi·ªØ l·∫°i ƒë·ªì quan tr·ªçng cho c·∫≠u üíï`)
      
    } catch (error) {
      bot.chat('ü•∫ C√≥ l·ªói khi c·∫•t ƒë·ªì...')
      console.log('L·ªói store items:', error)
    }
  }

  // ------------------ Auto Farm All ------------------
  function startAutoFarmAll() {
    autoFarmActive = true
    bot.chat('üó°Ô∏è B·∫Øt ƒë·∫ßu farm mob')
    
    const farmInterval = setInterval(async () => {
      if (!autoFarmActive) {
        clearInterval(farmInterval)
        return
      }

      try {
        const mob = bot.nearestEntity((entity: any) => {
          return entity.type === 'mob' && 
                 bot.entity.position.distanceTo(entity.position) < 10 &&
                 entity.displayName !== 'Enderman'
        })

        if (mob) {
          equipBestWeapon()
          bot.pvp.attack(mob)
        }
      } catch (error) {
        console.log('L·ªói auto farm:', error)
      }
    }, 200)
  }

  // ------------------ Auto Fishing Fixed ------------------
  async function startFishing() {
    try {
      stopAll()
      fishingActive = true
      autoFishingActive = true
      bot.chat('üé£ T·ªõ b·∫Øt ƒë·∫ßu c√¢u c√° cho c·∫≠u nh√©! üíï')
      
      const rod = bot.inventory.items().find(i => i.name.includes('fishing_rod'))
      if (!rod) {
        bot.chat('ü•∫ T·ªõ kh√¥ng c√≥ c·∫ßn c√¢u... c·∫≠u c√≥ th·ªÉ cho t·ªõ c·∫ßn c√¢u kh√¥ng?')
        fishingActive = false
        autoFishingActive = false
        return
      }

      // T√¨m n∆∞·ªõc v√† di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ t·ªët
      const water = bot.findBlock({
        matching: (block: any) => block.name === 'water',
        maxDistance: 32
      })
      
      if (!water) {
        bot.chat('ü•∫ T·ªõ kh√¥ng t√¨m th·∫•y n∆∞·ªõc g·∫ßn ƒë√¢y...')
        fishingActive = false
        autoFishingActive = false
        return
      }

      // Di chuy·ªÉn ƒë·∫øn c·∫°nh n∆∞·ªõc
      const goal = new goals.GoalNear(water.position.x, water.position.y + 1, water.position.z, 2)
      bot.pathfinder.setGoal(goal)
      await new Promise(resolve => setTimeout(resolve, 3000))
      bot.pathfinder.setGoal(null)

      // Trang b·ªã c·∫ßn c√¢u v√† ƒë·∫£m b·∫£o kh√¥ng ƒë·ªïi
      await bot.equip(rod, 'hand')
      
      // B·∫Øt ƒë·∫ßu c√¢u c√° li√™n t·ª•c
      await continuousFishing(water)
      
    } catch (error) {
      bot.chat('ü•∫ C√≥ l·ªói khi c√¢u c√°...')
      console.log('L·ªói fishing:', error)
      fishingActive = false
      autoFishingActive = false
    }
  }
  
  async function continuousFishing(water: any) {
    while (fishingActive && autoFishingActive) {
      try {
        // ƒê·∫£m b·∫£o v·∫´n c·∫ßm c·∫ßn c√¢u
        const currentItem = bot.heldItem
        if (!currentItem || !currentItem.name.includes('fishing_rod')) {
          const rod = bot.inventory.items().find(i => i.name.includes('fishing_rod'))
          if (rod) {
            await bot.equip(rod, 'hand')
          } else {
            bot.chat('ü•∫ M·∫•t c·∫ßn c√¢u r·ªìi...')
            fishingActive = false
            return
          }
        }
        
        // Nh√¨n v·ªÅ ph√≠a n∆∞·ªõc
        await bot.lookAt(water.position)
        await new Promise(resolve => setTimeout(resolve, 500))
        
        console.log('üé£ Th·∫£ c√¢u...')
        
        // S·ª≠ d·ª•ng bot.fish() v√† ch·ªù k·∫øt qu·∫£
        try {
          const caughtItem = await bot.fish()
          if (caughtItem) {
            const itemName = caughtItem.displayName || caughtItem.name || 'c√°'
            bot.chat(`üêü T·ªõ c√¢u ƒë∆∞·ª£c ${itemName}! C·∫≠u th·∫•y t·ªõ gi·ªèi kh√¥ng? üíï`)
            console.log(`üé£ C√¢u ƒë∆∞·ª£c: ${itemName}`)
          }
        } catch (fishError) {
          console.log('L·ªói khi c√¢u:', fishError)
        }
        
        // Ngh·ªâ tr∆∞·ªõc khi c√¢u ti·∫øp
        await new Promise(resolve => setTimeout(resolve, 2000))
        
      } catch (error) {
        if (fishingActive) {
          console.log('L·ªói trong chu tr√¨nh c√¢u c√°:', error)
          await new Promise(resolve => setTimeout(resolve, 3000))
        }
      }
    }
  }
  
  function stopFishing() {
    fishingActive = false
    autoFishingActive = false
    bot.chat('üõë T·ªõ d·ª´ng c√¢u c√° r·ªìi! üíï')
  }



  // Error handling
  bot.on('error', (err: any) => {
    console.log('üõë Bot g·∫∑p l·ªói:', err)
    
    // Don't auto-reconnect on certain critical errors
    if (err.message.includes('ENOTFOUND') || 
        err.message.includes('ECONNREFUSED') ||
        err.message.includes('Invalid username') ||
        err.message.includes('ECONNRESET')) {
      console.log('‚ùå L·ªói nghi√™m tr·ªçng, d·ª´ng auto-reconnect')
      return
    }
  })

  bot.on('end', (reason: string) => {
    console.log('üíî Bot ƒë√£ ng·∫Øt k·∫øt n·ªëi:', reason)
    
    // Only auto-reconnect for specific reasons, with backoff
    if ((reason === 'socketClosed' || reason === 'disconnect.quitting') && reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
      reconnectAttempts++
      const delay = Math.min(30000 * reconnectAttempts, 120000) // Exponential backoff, max 2 minutes
      console.log(`‚è≥ S·∫Ω th·ª≠ k·∫øt n·ªëi l·∫°i sau ${delay/1000} gi√¢y... (L·∫ßn th·ª≠ ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`)
      setTimeout(() => {
        console.log('üîÑ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...')
        createBot()
      }, delay)
    } else {
      console.log('‚ùå D·ª´ng auto-reconnect (qu√° s·ªë l·∫ßn th·ª≠ ho·∫∑c l√Ω do ng·∫Øt k·∫øt n·ªëi kh√¥ng ph√π h·ª£p)')
    }
  })
}

// Kh·ªüi t·∫°o bot
createBot()
