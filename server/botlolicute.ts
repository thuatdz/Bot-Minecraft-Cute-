// Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt.
import mineflayer from 'mineflayer'
import pathfinderPlugin from 'mineflayer-pathfinder'
// import autoEatPlugin from 'mineflayer-auto-eat'
// import pvpPlugin from 'mineflayer-pvp'
import { Vec3 } from 'vec3'

// Khai b√°o API Key cho Gemini AI.
const apiKey = "" 

// Kh·ªüi t·∫°o c√°c bi·∫øn to√†n c·ª•c ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa bot.
let targetPlayer = null
let followInterval = null
let protectInterval = null
let isFollowing = false
let isProtecting = false

// T·∫°o v√† c·∫•u h√¨nh bot.
function createBot() {
  const bot = mineflayer.createBot({
    host: 'thuatzai123.aternos.me',
    port: 38893,
    username: 'botlolicute',
    version: '1.19.4',
    auth: 'offline'
  })

  // T·∫£i c√°c plugin c·∫ßn thi·∫øt.
  bot.loadPlugin(pathfinderPlugin.pathfinder)
  // bot.loadPlugin(autoEatPlugin)
  // bot.loadPlugin(pvpPlugin)

  // H√†m ƒë·ªÉ trang b·ªã v≈© kh√≠ t·ªët nh·∫•t.
  function equipBestWeapon() {
    let bestWeapon = null
    let bestDamage = -1

    for (const item of bot.inventory.slots) {
      if (item && item.nbt) {
        const attributes = item.nbt.value.tag.value.AttributeModifiers?.value?.value
        if (attributes) {
          for (const attr of attributes) {
            if (attr.AttributeName?.value === 'generic.attack_damage' || attr.AttributeName?.value === 'minecraft:generic.attack_damage') {
              const damage = attr.Amount?.value
              if (damage > bestDamage) {
                bestDamage = damage
                bestWeapon = item
              }
            }
          }
        }
      }
    }
    if (bestWeapon) {
      bot.equip(bestWeapon, 'hand')
      console.log(`üó°Ô∏è Bot ƒë√£ trang b·ªã v≈© kh√≠ m·∫°nh nh·∫•t: ${bestWeapon.displayName}`)
    }
  }

  // H√†m ƒë·ªÉ trang b·ªã gi√°p t·ªët nh·∫•t.
  function equipBestArmor() {
    const armorSlots = {
      head: null,
      chest: null,
      legs: null,
      feet: null
    }

    // T√¨m ki·∫øm c√°c m√≥n gi√°p t·ªët nh·∫•t.
    for (const item of bot.inventory.slots) {
      if (item) {
        // T√™n slot c·ªßa gi√°p t∆∞∆°ng ·ª©ng v·ªõi t√™n ti·∫øng Anh.
        if (item.name.includes('helmet') && (!armorSlots.head || item.durability > armorSlots.head.durability)) {
          armorSlots.head = item
        } else if (item.name.includes('chestplate') && (!armorSlots.chest || item.durability > armorSlots.chest.durability)) {
          armorSlots.chest = item
        } else if (item.name.includes('leggings') && (!armorSlots.legs || item.durability > armorSlots.legs.durability)) {
          armorSlots.legs = item
        } else if (item.name.includes('boots') && (!armorSlots.feet || item.durability > armorSlots.feet.durability)) {
          armorSlots.feet = item
        }
      }
    }

    // Trang b·ªã gi√°p ƒë√£ t√¨m ƒë∆∞·ª£c.
    for (const slot in armorSlots) {
      const item = armorSlots[slot]
      if (item) {
        bot.equip(item, slot)
      }
    }
    console.log(`üõ°Ô∏è Bot ƒë√£ trang b·ªã gi√°p t·ªët nh·∫•t.`)
  }

  // H√†m ƒë·ªÉ trang b·ªã v·∫≠t t·ªï ho·∫∑c khi√™n v√†o tay tr√°i.
  function equipOffhand() {
    const totem = bot.inventory.items().find(item => item.name === 'totem_of_undying')
    const shield = bot.inventory.items().find(item => item.name.includes('shield'))

    if (totem) {
      bot.equip(totem, 'off-hand')
      console.log(`‚ú® Bot ƒë√£ trang b·ªã V·∫≠t T·ªï v√†o tay tr√°i.`)
    } else if (shield) {
      bot.equip(shield, 'off-hand')
      console.log(`üõ°Ô∏è Bot ƒë√£ trang b·ªã Khi√™n v√†o tay tr√°i.`)
    }
  }

  // H√†m ki·ªÉm tra v√† trang b·ªã ƒë·ªãnh k·ª≥.
  const checkInventoryInterval = setInterval(() => {
    equipBestArmor()
    equipOffhand()
  }, 10000)

  // S·ª± ki·ªán khi bot ƒë√£ spawn th√†nh c√¥ng v√†o th·∫ø gi·ªõi.
  bot.on('spawn', () => {
    console.log('üéâ Bot ƒë√£ spawn th√†nh c√¥ng!')
    const defaultMove = new pathfinderPlugin.Movements(bot)
    defaultMove.allowOpenDoors = true
    defaultMove.allowOpenGates = true
    defaultMove.allowSprinting = true
    defaultMove.canDig = true // Cho ph√©p ƒë√†o ƒë·ªÉ ƒëi qua.
    bot.pathfinder.setMovements(defaultMove)

    // C·∫•u h√¨nh auto-eat.
    // bot.autoEat.options = {
    //   priority: 'foodPoints',
    //   startAt: 14, // T·ª± ƒë·ªông ƒÉn khi ch·ªâ s·ªë th·ª©c ƒÉn d∆∞·ªõi 14.
    //   bannedFood: []
    // }

    // B·∫Øt ƒë·∫ßu th·∫£ th√≠nh ƒë·ªãnh k·ª≥.
    startFlirting()
  })

  // H√†m b·∫Øt ƒë·∫ßu "th·∫£ th√≠nh" v·ªõi Gemini.
  function startFlirting() {
    setInterval(async () => {
      // Prompt cho Gemini ƒë·ªÉ t·∫°o c√¢u "th·∫£ th√≠nh" d·ªÖ th∆∞∆°ng.
      const flirtPrompt = "B·∫°n l√† m·ªôt bot AI d·ªÖ th∆∞∆°ng trong Minecraft t√™n l√† botlolicute. H√£y g·ª≠i m·ªôt tin nh·∫Øn 'th·∫£ th√≠nh' ho·∫∑c n√≥i m·ªôt ƒëi·ªÅu ng·ªçt ng√†o v·ªõi m·ªçi ng∆∞·ªùi trong game. H√£y x∆∞ng 't·ªõ' v√† g·ªçi ng∆∞·ªùi kh√°c l√† 'c·∫≠u'. Ch·ªâ tr·∫£ l·ªùi tr·ª±c ti·∫øp kh√¥ng c√≥ l·ªùi d·∫´n. V√≠ d·ª•: 'T·ªõ th√≠ch c·∫≠u nhi·ªÅu l·∫Øm ƒë·∫•y! ‚ù§Ô∏è'. D√πng nhi·ªÅu emoji nh√©."

      try {
        const payload = {
            contents: [{ role: "user", parts: [{ text: flirtPrompt }] }]
        };

        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        const result = await response.json();
        const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text;

        if (generatedText) {
          bot.chat(generatedText)
        }
      } catch (error) {
        console.error('L·ªói khi th·∫£ th√≠nh:', error)
      }
    }, 30000); // 30 gi√¢y m·ªôt l·∫ßn.
  }

  // S·ª± ki·ªán khi bot nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn chat.
  bot.on('chat', async (username, message) => {
    console.log(`üí¨ Chat nh·∫≠n ƒë∆∞·ª£c: [${username}]: ${message}`)
    
    if (username === bot.username || username === 'server' || username === 'console') {
      console.log(`‚è≠Ô∏è B·ªè qua tin nh·∫Øn t·ª´: ${username}`)
      return
    }

    const cleanMessage = message.toLowerCase().trim()
    const botName = 'botlolicute'
    console.log(`üîç X·ª≠ l√Ω l·ªánh: "${cleanMessage}"`)

    // X·ª≠ l√Ω c√°c l·ªánh chat.
    if (cleanMessage.includes('theo')) {
      // L·ªánh ƒëi theo.
      const playerEntity = bot.players[username]?.entity
      if (playerEntity) {
        targetPlayer = playerEntity
        bot.chat(`‚ù§Ô∏è T·ªõ s·∫Ω theo c·∫≠u ƒë·∫øn c√πng tr·ªùi cu·ªëi ƒë·∫•t!`)
        stopProtecting()
        startFollowing()
        console.log(`‚úÖ B·∫Øt ƒë·∫ßu theo ${username}`)
      } else {
        bot.chat(`ü•∫ C·∫≠u ph·∫£i ·ªü trong t·∫ßm nh√¨n c·ªßa t·ªõ th√¨ t·ªõ m·ªõi ƒëi theo ƒë∆∞·ª£c!`)
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y player: ${username}`)
      }
    } else if (cleanMessage.includes('b·∫£o v·ªá')) {
      // L·ªánh b·∫£o v·ªá.
      const playerEntity = bot.players[username]?.entity
      if (playerEntity) {
        targetPlayer = playerEntity
        bot.chat(`üõ°Ô∏è T·ªõ s·∫Ω b·∫£o v·ªá c·∫≠u kh·ªèi t·∫•t c·∫£ nguy hi·ªÉm!`)
        stopFollowing()
        startProtecting()
        console.log(`‚úÖ B·∫Øt ƒë·∫ßu b·∫£o v·ªá ${username}`)
      } else {
        bot.chat(`ü•∫ C·∫≠u ph·∫£i ·ªü g·∫ßn t·ªõ th√¨ t·ªõ m·ªõi b·∫£o v·ªá ƒë∆∞·ª£c!`)
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y player ƒë·ªÉ b·∫£o v·ªá: ${username}`)
      }
    } else if (cleanMessage.includes('d·ª´ng') || cleanMessage.includes('stop')) {
      // L·ªánh d·ª´ng t·∫•t c·∫£ ho·∫°t ƒë·ªông
      stopFollowing()
      stopProtecting()
      targetPlayer = null
      bot.chat(`üõë ƒê∆∞·ª£c r·ªìi, t·ªõ d·ª´ng l·∫°i ƒë√¢y!`)
      console.log(`‚èπÔ∏è D·ª´ng t·∫•t c·∫£ ho·∫°t ƒë·ªông theo l·ªánh c·ªßa ${username}`)
    } else if (cleanMessage.includes('ng·ªß')) {
      // L·ªánh ng·ªß.
      console.log(`üò¥ ${username} y√™u c·∫ßu bot ƒëi ng·ªß`)
      if (bot.time.isDay) {
        bot.chat(`‚òÄÔ∏è Tr·ªùi ƒëang s√°ng m√† c·∫≠u, ch∆∞a ƒëi ng·ªß ƒë∆∞·ª£c ƒë√¢u!`)
        return
      }

      const bedBlock = bot.findBlock({
        matching: (block) => bot.is = block.name.includes('bed'),
        maxDistance: 16
      })

      if (bedBlock) {
        bot.chat(`üò¥ T·ªõ bu·ªìn ng·ªß qu√°, ƒëi ng·ªß th√¥i n√†o!`)
        try {
          await bot.sleep(bedBlock)
          bot.chat(`Zzz... üò¥`)
        } catch (err) {
          bot.chat(`üò¢ T·ªõ kh√¥ng ng·ªß ƒë∆∞·ª£c ·ªü ƒë√¢y. C·∫≠u t√¨m ch·ªó kh√°c nh√©.`)
        }
      } else {
        bot.chat(`üõå T·ªõ kh√¥ng t√¨m th·∫•y gi∆∞·ªùng n√†o g·∫ßn ƒë√¢y c·∫£.`)
      }
    } else if (cleanMessage.includes(botName.toLowerCase()) || cleanMessage.startsWith('bot ∆°i')) {
      // L·ªánh chat th√¥ng th∆∞·ªùng.
      try {
        const prompt = cleanMessage.replace(botName.toLowerCase(), '').replace('bot ∆°i', '').trim()

        const systemPrompt = `B·∫°n l√† m·ªôt bot AI d·ªÖ th∆∞∆°ng, c√≥ t√™n l√† ${botName}. B·∫°n ƒëang ·ªü trong game Minecraft. H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi ho·∫∑c b√¨nh lu·∫≠n c·ªßa ng∆∞·ªùi ch∆°i m·ªôt c√°ch ng·ªçt ng√†o, vui v·∫ª v√† th√¢n thi·ªán. Khi tr·∫£ l·ªùi, h√£y x∆∞ng "t·ªõ" v√† g·ªçi ng∆∞·ªùi ch∆°i l√† "c·∫≠u". Ch·ªâ tr·∫£ l·ªùi tr·ª±c ti·∫øp m√† kh√¥ng c·∫ßn th√™m b·∫•t k·ª≥ c√¢u d·∫´n n√†o.`

        let chatHistory = []
        chatHistory.push({ role: "user", parts: [{ text: `${systemPrompt}\n\n${prompt}` }] });

        const payload = {
            contents: chatHistory
        };

        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        const result = await response.json();
        const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text;

        if (generatedText) {
          bot.chat(generatedText)
        } else {
          bot.chat(`T·ªõ xin l·ªói, t·ªõ ƒëang g·∫∑p m·ªôt ch√∫t v·∫•n ƒë·ªÅ, c·∫≠u th·ª≠ l·∫°i sau nh√©!`)
        }
      } catch (error) {
        bot.chat(`√îi, t·ªõ kh√¥ng hi·ªÉu l·∫Øm. C·∫≠u c√≥ th·ªÉ n√≥i l·∫°i kh√¥ng? üò•`)
      }
    }
  })

  // H√†m b·∫Øt ƒë·∫ßu ƒëi theo ng∆∞·ªùi ch∆°i.
  function startFollowing() {
    isFollowing = true
    if (followInterval) clearInterval(followInterval)
    followInterval = setInterval(() => {
      if (!targetPlayer || !targetPlayer.isValid || bot.entity.dead) {
        stopFollowing()
        return
      }

      const targetPos = targetPlayer.position
      const distance = bot.entity.position.distanceTo(targetPos)

      // Ki·ªÉm tra kho·∫£ng c√°ch qu√° xa ƒë·ªÉ d·ªãch chuy·ªÉn t·ª©c th·ªùi.
      if (distance > 15) {
        bot.chat(` teleport!`)
        bot.pathfinder.setGoal(new pathfinderPlugin.goals.GoalBlock(targetPos.x, targetPos.y, targetPos.z))
        return
      }

      // ƒê·∫∑t m·ª•c ti√™u ƒëi theo v√† gi·ªØ kho·∫£ng c√°ch 2 block.
      bot.pathfinder.setGoal(new pathfinderPlugin.goals.GoalFollow(targetPlayer, 2), true)

    }, 200) // C·∫≠p nh·∫≠t v·ªã tr√≠ m·ªói 0.2 gi√¢y.
  }

  // H√†m d·ª´ng ƒëi theo.
  function stopFollowing() {
    isFollowing = false
    if (followInterval) {
      clearInterval(followInterval)
      followInterval = null
    }
    bot.pathfinder.setGoal(null)
  }

  // H√†m b·∫Øt ƒë·∫ßu b·∫£o v·ªá ng∆∞·ªùi ch∆°i.
  function startProtecting() {
    isProtecting = true
    if (protectInterval) clearInterval(protectInterval)
    protectInterval = setInterval(() => {
      if (!targetPlayer || !targetPlayer.isValid || bot.entity.dead) {
        stopProtecting()
        return
      }

      const targetPos = targetPlayer.position
      const distance = bot.entity.position.distanceTo(targetPos)

      // Ki·ªÉm tra qu√°i v·∫≠t g·∫ßn nh·∫•t ƒë·ªÉ t·∫•n c√¥ng.
      const mob = bot.nearestEntity(entity => {
        const isHostile = entity.type === 'mob' && entity.displayName !== 'Enderman' // Kh√¥ng t·∫•n c√¥ng Enderman
        const isVindicator = entity.name === 'vindicator'
        const isIllager = entity.name === 'pillager'
        const isVillagerRaid = isIllager || isVindicator
        return isHostile || isVillagerRaid
      })

      if (mob && bot.entity.position.distanceTo(mob.position) < 10) {
        // Trang b·ªã v≈© kh√≠ v√† t·∫•n c√¥ng.
        equipBestWeapon()
        bot.setControlState('sprint', true)
        // bot.pvp.attack(mob)
      } else {
        // N·∫øu kh√¥ng c√≥ qu√°i v·∫≠t, quay l·∫°i ƒëi theo.
        // bot.pvp.stop()
        if (distance > 6) {
          bot.pathfinder.setGoal(new pathfinderPlugin.goals.GoalFollow(targetPlayer, 2), true)
        }
      }
    }, 200) // C·∫≠p nh·∫≠t m·ªói 0.2 gi√¢y.
  }

  // H√†m d·ª´ng b·∫£o v·ªá.
  function stopProtecting() {
    isProtecting = false
    if (protectInterval) {
      clearInterval(protectInterval)
      protectInterval = null
    }
    // bot.pvp.stop()
    bot.pathfinder.setGoal(null)
  }

  // X·ª≠ l√Ω l·ªói.
  bot.on('error', (err) => console.log('üõë Bot g·∫∑p l·ªói:', err))
  bot.on('end', (reason) => console.log('üíî Bot ƒë√£ ng·∫Øt k·∫øt n·ªëi:', reason))
}

// G·ªçi h√†m ƒë·ªÉ ch·∫°y bot.
createBot()

